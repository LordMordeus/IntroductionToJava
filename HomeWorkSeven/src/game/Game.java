package game;

import javax.swing.*;

// ================================================================================================================== //
/** Класс Game. Основной класс игры.
 *  Уровень доступа:
 *      - доступность самого класса, конструктора и метода initGame: доступно по всему проекту;
 *      - для основных переменных: доступно только внутри класса;
 *      - для "геттеров"/"сеттеров" и остальных методов: доступно внутри пакета. */
public class Game {
// ================================================================================================================== //
    /* Блок основных переменных. */
    private GameBoard board; // ссылка на игровое поле
    private GamePlayer[] gamePrayers = new GamePlayer[2]; // массив игроков
    private int playersTurn = 0; // индекс текущего игрока
// ================================================================================================================== //
    /* Блок конструкторов класса. */
// ------------------------------------------------------------------------------------------------------------------ //
    /** Описание: Конструктор для создания основного класса игры. */
    public Game() {
        this.board = new GameBoard(this);
    }
// ================================================================================================================== //
    /* Блок методов класса. */
// ------------------------------------------------------------------------------------------------------------------ //
    /** Описание: Метод для инициализации игры. */
    public void initGame() {
        gamePrayers[0] = new GamePlayer(true, 'X');
        gamePrayers[1] = new GamePlayer(false, 'O');
    }
// ------------------------------------------------------------------------------------------------------------------ //
    /** Метод передачи хода.
     *  Примечание: в ходе реализации задания, мною был обнаружен описанный,
     *  но не реализованный метод isRealPrayer(), возвращающий флаг типа игрока.
     *  Кроме того, определяющее условие `playersTurn == 0` приводило к тому,
     *  что в следующем туре игроки менялись знаками, что является интересной идеей,
     *  но в изначальную концепцию "Человек-из-Мяса Ходит Крестами" не вписывается.
     *  Таким образом, была проведена нижеследующая замена. */
    void passTurn() {
        /* Данный блок был заменён на проверку по флагу realPlayer
         * if(playersTurn == 0) {
         *   playersTurn = 1;
         * } else {
         *   playersTurn = 0;
         * } */

        if(board.getGame().getCurrentPlayer().isRealPlayer()) {
            playersTurn = 1;
        } else {
            playersTurn = 0;
        }
    }
// ------------------------------------------------------------------------------------------------------------------ //
    /** Получение объекта текущего игрока.
     *  Исходящие данные:
     *      @return GamePlayer - объект игрока. */
    GamePlayer getCurrentPlayer() {
        return gamePrayers[playersTurn];
    }
// ------------------------------------------------------------------------------------------------------------------ //
    /** Метод показа всплывающего сообщения для пользователя.
     *  Входяшие данные:
     *      @param messageTitle - заголовок сообщения.
     *      @param messageText - текст сообщения.
     *      @param messageType - числовой индекс типа сообщения JOptionPane.
     *  Примечание: метод показа сообщений был немного доработан из эстетических
     *  соображений. Теперь, в него передаётся ещё и тип сообщения с заголовком. */
    void showMessage(String messageTitle, String messageText, int messageType) {
        JOptionPane.showMessageDialog(board, messageTitle, messageText, messageType);
    }
// ------------------------------------------------------------------------------------------------------------------ //
    /** Метод для принудительной установки первого хода человека.
     *  Примечание: В ходе работы алгоритма выяснилось, что в следующем туре после
     *  победы игрока-человека он меняется местами с компьютером. Имея знак 'O' и
     *  атрибут `realPlayer = false`, игра, тем не менее, фиксировала победу именно
     *  человека.
     *  Для исправления ситуации принудительно устанавливается индекс игрока 0 (человек)
     *  после достижения терминального состояния игры ("победа человека", "победа компьютера",
     *  "ничья"), а также вводится флаг isGameOver в классе GameActionListener. */
    void setHumanityFirst() {
        playersTurn = 0;
    }
}
// ================================================================================================================== //
